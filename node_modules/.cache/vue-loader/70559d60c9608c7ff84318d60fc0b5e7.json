{"remainingRequest":"C:\\Users\\15780\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\visual studio file\\puzzle\\Puzzle.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"E:\\visual studio file\\puzzle\\Puzzle.vue","mtime":1569310275199},{"path":"C:\\Users\\15780\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"C:\\Users\\15780\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\15780\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\15780\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.puzzle{\n    position:relative; \n    border: 2px solid #ccc;\n}\n.puzzle__block{\n    box-sizing: border-box;\n    position:absolute;\n    border: 1px solid #fff;\n    transition: all .3s;\n}\n",{"version":3,"sources":["Puzzle.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Puzzle.vue","sourceRoot":".","sourcesContent":["<template>\r\n    <div class=\"puzzle\"  :style=\"{width:width+'px',height:height+'px'}\">\r\n        <div\r\n        class=\"puzzle__block\"\r\n        v-for=\"(item,index) in blockPoints\"\r\n        :key=\"item.id\"\r\n        :style=\"{\r\n            width:blockWidth+'px',\r\n            height:blockHeight+'px',\r\n            left:item.x+'px',\r\n            top:item.y+'px',\r\n            backgroundImage:`url(${img})`,\r\n            backgroundPosition:`-${correctPoints[index].x}px -${correctPoints[index].y}px`,\r\n            opacity: index === blockPoints.length-1 && 0\r\n        }\"\r\n        @click=\"handleClick\"\r\n        :ref=\"index === blockPoints.lenght - 1 ? 'empty' : 'block'\" \r\n        :data-correctX=\"correctPoints[index].x\"\r\n        :data-correctY=\"correctPoints[index].y\"   \r\n        />\r\n    </div>\r\n</template>\r\n<script>\r\nexport default {\r\n    props:{\r\n        width:{\r\n            type:Number,\r\n            default:500\r\n\r\n        },\r\n        height:{\r\n            type:Number,\r\n            default:500\r\n        },\r\n        row:{          //行\r\n            type:Number,\r\n            default:3\r\n        },\r\n        col:{           //列\r\n            type:Number,\r\n            default:3\r\n        },\r\n        img:{\r\n            type:String,\r\n            required:true\r\n        },\r\n        \r\n    },\r\n    //计算属性\r\n    computed:{\r\n            blockWidth(){\r\n                return this.width / this.col;\r\n            },\r\n            blockHeight(){\r\n                return this.height / this.row;\r\n            },\r\n            correctPoints(){       //原来正确数组的信息\r\n                const {col,row,blockWidth,blockHeight}=this;   //在this里面取row，col的值\r\n                const arr=[];\r\n                for(let i=0;i<row;i++){\r\n                    for(let j=0;j<row;j++){\r\n                        arr.push({\r\n                            x:j*blockWidth,\r\n                            y:i*blockHeight,\r\n                            id:new Date().getTime()+Math.random()*100     //提取0-100的随机数\r\n                        })\r\n                    }\r\n                } \r\n               return arr;\r\n            },\r\n            blockPoints(){\r\n                 const points=this.correctPoints;\r\n                 const length=points.length;\r\n                 const lastEle=points[length-1];   //最后一个元素\r\n                 const newArr=[...points];\r\n                 //乱序八个div\r\n                 newArr.length=length-1;\r\n                 newArr.sort(() => Math.random() - 0.5);   //取随机数打乱顺序\r\n                 newArr.push(lastEle);   //将最后一个元素添加进去\r\n                 return newArr;\r\n            }\r\n    },\r\n    \r\n    methods:{\r\n        handleClick (e) {\r\n            const blockDom = e.target;\r\n            const emptyDom = this.$refs.empty[0];\r\n            // if(!this.isAdjacent(blockDom,emptyDom)){\r\n            //     return;\r\n            // }\r\n            const {left,top} = blockDom.style;\r\n            blockDom.style.left=emptyDom.style.left;\r\n            blockDom.style.top=emptyDom.style.top;\r\n            emptyDom.style.left=left;\r\n            emptyDom.style.top=top;\r\n            const winFlag=this.checkWin();\r\n            if(winFlag){\r\n                this.winGame(emptyDom)\r\n            }\r\n        },\r\n        isAdjacent (blockDom,emptyDom) {\r\n            const {left:domLeft,top:domTop,width,height}=blockDom.style;\r\n            const {left:emptyLeft,top:emptyTop}=emptyDom.style;\r\n            const xDis = Math.floor(Math.abs(parseFloat(domLeft)-parseFloat(emptyLeft)));\r\n            const yDis = Math.floor(Math.abs(parseFloat(domTop)-parseFloat(emptyTop)));\r\n            const flag = (domLeft === emptyLeft && yDis === parseInt(height))\r\n                        || (domTop === emptyTop && xDis === parseInt(width));\r\n            console.log(flag);\r\n            return flag;\r\n        },\r\n        checkWin () {\r\n            const blockDomArr=this.$refs.block;\r\n            return blockDomArr.every(dom=>{\r\n                const { left:domLeft,top:domTop}=dom.style;\r\n                const { correctx:correctX,correcty:correctY}=dom.dataset;\r\n                const flag = parseInt(domLeft) === parseInt(correctX) && parseInt(domTop) === parseInt(correctY);\r\n                return flag;\r\n            })\r\n        },\r\n        winGame (emptyDom) {\r\n            setTimeout(()=>{\r\n                alert('闯关成功，下一关');\r\n                emptyDom.style.opacity=1;\r\n                setTimeout(()=>{\r\n                    this.gotoNextLever();\r\n                },300)\r\n                \r\n            },300)\r\n        },\r\n        gotoNextLever(){\r\n            const answerFlag=window.confirm('是否进行下一关？');\r\n            if(answerFlag){\r\n                this.$emit('next');\r\n            }\r\n        }\r\n    } \r\n}\r\n</script>\r\n<style>\r\n    .puzzle{\r\n        position:relative; \r\n        border: 2px solid #ccc;\r\n    }\r\n    .puzzle__block{\r\n        box-sizing: border-box;\r\n        position:absolute;\r\n        border: 1px solid #fff;\r\n        transition: all .3s;\r\n    }\r\n</style>"]}]}